/*
 * Vehicule_Testeur.cpp
 *
 *  Created on: Nov 22, 2019
 *      Author: etudiant
 */
#include <gtest/gtest.h>
#include "Vehicule.h"
#include "Date.h"
using namespace saaq;
using namespace std;

/**
 * \class Date
 * \brief classe Date de test permettant de tester la date du jour
 */
util::Date uneDate;

/**
 * \class VehiculeTest
 * \brief classe de test permettant de tester la classe Vehicule
 */

class VehiculeTest: public Vehicule
{
public:
	VehiculeTest(const std::string& p_niv, const std::string& p_immatriculation, util::Date& p_dateEnregistrement):
		Vehicule(p_niv, p_immatriculation, p_dateEnregistrement)
	{

	};
	virtual string reqVehiculeFormate() const
	{
		return "";
	}
	virtual double tarificationAnnuelle() const
	{
		return 0;
	}
	virtual Vehicule* clone() const
	{
		return new VehiculeTest(*this);
	}

};

/** \class unVehicule
 *  \Fixture unVehicule pour la création d'un vehicule pour les tests
 */
class unVehicule : public ::testing::Test
{
public:
	unVehicule() : v_vehicule("3VWFE21C04M000001", "IFT 006", uneDate) {};
	VehiculeTest v_vehicule;
};


/**
 * \brief Test du constructeur valide Vehicule(const std::string& p_niv, const std::string& p_immatriculation, util::Date& p_dateEnregistrement)
 *        cas valide: Creation d'un objet Vehicule et que tous ses attributs sont valides
 *        cas invalides:
 *                    p_niv invalide
 *                    p_immatriculation invalide
 *                    p_dateEnregistrement invalide
 */
TEST(Vehicule, ConstructeurAvecParametresValides)
{
	VehiculeTest vehicTest("3VWFE21C04M000001", "IFT 006", uneDate);
	ASSERT_EQ("3VWFE21C04M000001", vehicTest.reqNiv());
	ASSERT_EQ("IFT 006", vehicTest.reqImmatriculation());
	ASSERT_EQ(true, util::Date::validerDate(uneDate.reqJour(), uneDate.reqMois(), uneDate.reqAnnee()));

}

/**
 * \brief Test du niv invalide Vehicule
 *        cas invalides:
 *                    p_niv invalide
 */
TEST(Vehicule, ConstructeurAvecNivInvalides)
{
	ASSERT_THROW(VehiculeTest vehicTest("INVALIDE", "IFT 006", uneDate), ContratException);
}

/**
 * \brief Test de l'immatriculation invalide Vehicule
 *        cas invalides:
 *                    p_immatriculation invalide
 */
TEST(Vehicule, ConstructeurAvecImmatriculationInvalides)
{
	ASSERT_THROW(VehiculeTest vehicTest("3VWFE21C04M000001", "INVALIDE", uneDate), ContratException);
}

/** \brief Test de la méthode reqNiv
 *   Cas valide : le NIV assigné doit être égal au NIV passé en paramètre
 *   Cas invalide : aucun cas invalide
 */
TEST_F(unVehicule, reqNiv)
{
	ASSERT_EQ("3VWFE21C04M000001", v_vehicule.reqNiv());
}


//virtual double tarificationAnnuelle() const=0;
////getters
//const std::string& reqImmatriculation() const;
//const util::Date reqDateEnregistrement() const;
//virtual std::string reqVehiculeFormate() const=0;
